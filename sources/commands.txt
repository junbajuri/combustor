Commands
========

create:layout
^^^^^^^^^^^^^

``$ php vendor/bin/combustor create:layout [options]``

Creates a new header and footer file

**Options:**

* ``--bootstrap`` - Include the `Bootstrap`_ tags

create:controller
^^^^^^^^^^^^^^^^^

``$ php vendor/bin/combustor create:controller [name] [options]``

Creates a new controller

**Arguments:**

* ``name`` - Name of the controller

**Options:**

* ``--camel`` - Use the camel case naming convention for the accessor and mutators

* ``--doctrine`` - Generate a controller based from Doctrine

* ``--keep`` - Keeps the name to be used

* ``--lowercase`` - Keep the first character of the name to lowercase

* ``--wildfire`` - Generate a controller based from Wildfire

create:model
^^^^^^^^^^^^

``$ php vendor/bin/combustor create:model [name] [options]``

Creates a new model

**Arguments:**

* ``name`` - Name of the model

**Options:**

* ``--camel`` - Use the camel case naming convention for the accessor and mutators

* ``--doctrine`` - Generate a model based from Doctrine

* ``--keep`` - Keeps the name to be used

* ``--lowercase`` - Keep the first character of the name to lowercase

* ``--wildfire`` - Generate a model based from Wildfire

create:view
^^^^^^^^^^^

``$ php vendor/bin/combustor create:view [name] [options]``

Creates a new view

**Arguments:**

* ``name`` - Name of the directory to be included in the ``views`` directory

**Options:**

* ``--bootstrap`` - Include the [Bootstrap](http://getbootstrap.com/) tags

* ``--camel`` - Use the camel case naming convention for the accessor and mutators

* ``--doctrine`` - Generate a model based from Doctrine

* ``--keep`` - Keeps the name to be used

* ``--wildfire`` - Generate a model based from Wildfire

create:scaffold
^^^^^^^^^^^^^^^

``$ php vendor/bin/combustor create:scaffold [name] [options]``

Creates a new controller, model, and view

**Arguments:**

* ``name`` - Name of the directory to be included in the ``views`` directory

**Options:**

* ``--bootstrap`` - Include the [Bootstrap](http://getbootstrap.com/) tags

* ``--camel`` - Use the camel case naming convention for the accessor and mutators

* ``--doctrine`` - Generate a model based from Doctrine

* ``--keep`` - Keeps the name to be used

* ``--lowercase`` - Keep the first character of the name to lowercase

* ``--wildfire`` - Generate a model based from Wildfire

Methods
^^^^^^^

Deleting specified row/s
------------------------

``$this->wildfire->delete($table, $delimiters = array());``

Delete the specified data from storage

**Arguments:**

* ``$table`` - Name of the specified table

* ``$delimiters`` - Delimits the list of rows to be returned

Finding specified row
---------------------

``$this->wildfire->find($table, $delimiters = array());``

Find the row from the specified ID or with the list of delimiters from the specified table

**Arguments:**

* ``$table`` - Name of the specified table

* ``$delimiters`` - Delimits the list of rows to be returned

Retrieving all data
-------------------

``$this->wildfire->get_all($table, $delimiters = array());``
``$this->doctrine->get_all($table, $delimiters = array());``

Return all rows from the specified table

**Arguments:**

* ``$table`` - Name of the specified table

* ``$delimiters`` - Delimits the list of rows to be returned

	* The following required indexes are:

		* ``$delimiters['keyword']`` - Used for searching the data from the storage (this is used in the "search box" implementation)

		* ``$delimiters['per_page']`` - Displays the number of rows per page

**Returned values:**

	* ``->as_dropdown($description)`` - Returns the list of rows in a ``form_dropdown()`` format

		* ``$description`` - The field to be display in the dropdown

			* The default value is ``description``

	* ``->result()`` - Returns the list of rows from the storage

	* ``->total_rows()`` - Returns the number of rows from the result

.. _Bootstrap: http://getbootstrap.com/